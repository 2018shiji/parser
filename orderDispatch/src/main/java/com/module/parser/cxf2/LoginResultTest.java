package com.module.parser.cxf2;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.14
 * 2020-08-21T10:57:20.730+08:00
 * Generated source version: 3.2.14
 *
 */
@WebServiceClient(name = "LoginResultTest",
                  wsdlLocation = "file:/C:/Users/lizhuangjie.chnet/IdeaProjects/parser/orderDispatch/src/main/resources/toWsdl2/LoginResultTest.wsdl",
                  targetNamespace = "http://module.com/parser/entity/test/LoginResultTest")
public class LoginResultTest extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://module.com/parser/entity/test/LoginResultTest", "LoginResultTest");
    public final static QName LoginResultTestPort = new QName("http://module.com/parser/entity/test/LoginResultTest", "LoginResultTestPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/lizhuangjie.chnet/IdeaProjects/parser/orderDispatch/src/main/resources/toWsdl2/LoginResultTest.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LoginResultTest.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/lizhuangjie.chnet/IdeaProjects/parser/orderDispatch/src/main/resources/toWsdl2/LoginResultTest.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LoginResultTest(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LoginResultTest(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LoginResultTest() {
        super(WSDL_LOCATION, SERVICE);
    }

    public LoginResultTest(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LoginResultTest(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LoginResultTest(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns LoginResultTestPortType
     */
    @WebEndpoint(name = "LoginResultTestPort")
    public LoginResultTestPortType getLoginResultTestPort() {
        return super.getPort(LoginResultTestPort, LoginResultTestPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LoginResultTestPortType
     */
    @WebEndpoint(name = "LoginResultTestPort")
    public LoginResultTestPortType getLoginResultTestPort(WebServiceFeature... features) {
        return super.getPort(LoginResultTestPort, LoginResultTestPortType.class, features);
    }

}
